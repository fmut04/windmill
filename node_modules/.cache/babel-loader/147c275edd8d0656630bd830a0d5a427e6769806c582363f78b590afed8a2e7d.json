{"ast":null,"code":"var _jsxFileName = \"/Users/faisal/new-clicker-game/src/Wallet.js\";\nimport React, { useState, useEffect, useRef, useCallback, Component } from \"react\";\n\n// function Wallet({ updateMoney, resourcesMined, harvestingPower, dps }) {\n//   const [totalResources,setTotalResources] = useState((1+resourcesMined)*10);\n//   const [currentResources,setCurrentResources] = useState(totalResources);\n//   let currentResourcesRef = useRef(currentResources)\n//   const [canHarvest,setCanHarvest] = useState(true)\n//   const [shouldReset,setShouldReset] = useState(false)\n\n//   function handleResourceDepleted() {\n//     setCurrentResources(0)\n//     setCanHarvest(false)\n//     setTotalResources(totalResources*1.1)\n//     setTimeout(() => {\n//      setShouldReset(true)\n//  },500)}\n\n//  const harvestResource = useCallback(\n//   (clickStrength) => {\n//     console.log(dps);\n//     if (!canHarvest) return;\n//     let harvestAmount = clickStrength ? clickStrength : getDps();\n//     //console.log(harvestAmount)\n//     updateMoney(harvestAmount);\n//     setCurrentResources((c) => {\n//       console.log('setCurrentResources called');\n//       return c - harvestAmount;\n//     });\n//     currentResourcesRef.current = currentResources - harvestAmount;\n//     if (currentResourcesRef.current <= 1) {\n//       handleResourceDepleted();\n//     }\n//   },\n//   [canHarvest]\n// );\n\n// function getDps() {\n//   return dps\n// }\n// //  useEffect(() => {\n// //    currentResourcesRef.current = currentResources\n// //  }, [currentResources])\n\n//   // function harvestResource(clickStrength) {\n//   //     console.log(dps)\n//   //     if(!canHarvest) return\n//   //     let harvestAmount = clickStrength ? clickStrength : getDps()\n//   //     //console.log(harvestAmount)\n//   //   updateMoney(harvestAmount)\n//   //   setCurrentResources((c) => {\n//   //     console.log(c);\n//   //     return c - harvestAmount;\n//   //   });\n//   //   console.log(currentResources);\n//   //   //console.log(currentResources)\n//   //   currentResourcesRef.current = currentResources - harvestAmount;\n//   //   if(currentResourcesRef.current<=1){\n//   //   handleResourceDepleted()\n//   //   }}\n\n//   // Resets the resource if shouldReset is made True\n//   useEffect(() => {\n//     if(shouldReset) {\n//     setCurrentResources(totalResources)\n//     setCanHarvest(true)\n//     setShouldReset(false)\n//     }\n//   }, [shouldReset,totalResources, harvestResource])\n\n//   //Harvests the resource based on dps on an interval\n\n//   useEffect(() => {\n//       const interval = setInterval(() => {\n//         console.log(\"harvest resource called \")\n//       harvestResource()\n//     }, 1000);\n//     return () => {\n//       clearInterval(interval);\n//     }\n//   // eslint-disable-next-line \n//   },[])\n\n//   return (\n//     <>\n//     <div className=\"centerItems\"> \n//     <img\n//         id=\"wallet\"\n//         src={process.env.PUBLIC_URL + currentResources>0 ? \"/wallet/Wallet-0.png\" : \"/wallet/Wallet-1.png\"}\n//         alt=\"broken img\"\n//         style={{width: `${10*(currentResources/totalResources)+10}rem`}}\n//          //style={{width: `${20*.3}px`} , height: `${currentResources/totalResources*100}%`}}\n//         onClick={() => {\n//           harvestResource(harvestingPower)\n//         }}\n//       ></img>\n//       <h1>\n//         {(currentResources/totalResources*100).toFixed(0) + \"%\"}\n//       </h1>\n//     </div>\n\n//     </>\n//   );\n\n//   function harvestDps() {\n//     harvestResource()\n//   }\n\n// }\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Wallet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.harvestResource = clickStrength => {\n      console.log(this.props.dps);\n      if (!this.state.canHarvest) return;\n      let harvestAmount = clickStrength ? clickStrength : this.getDps();\n      //console.log(harvestAmount)\n      this.props.updateMoney(harvestAmount);\n      this.setState(state => {\n        console.log(\"setCurrentResources called\");\n        return {\n          currentResources: state.currentResources - harvestAmount\n        };\n      });\n      this.currentResourcesRef.current = this.state.currentResources - harvestAmount;\n      if (this.currentResourcesRef.current <= 1) {\n        this.handleResourceDepleted();\n      }\n    };\n    this.state = {\n      totalResources: (1 + this.props.resourcesMined) * 10,\n      currentResources: (1 + this.props.resourcesMined) * 10,\n      canHarvest: true,\n      shouldReset: false\n    };\n    this.currentResourcesRef = /*#__PURE__*/React.createRef();\n  }\n  handleResourceDepleted() {\n    this.setState({\n      currentResources: 0,\n      canHarvest: false,\n      totalResources: this.state.totalResources * 1.1\n    });\n    setTimeout(() => {\n      this.setState({\n        shouldReset: true\n      });\n    }, 500);\n  }\n  getDps() {\n    return this.props.dps;\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.shouldReset) {\n      this.setState({\n        currentResources: this.state.totalResources,\n        canHarvest: true,\n        shouldReset: false\n      });\n    }\n  }\n  componentDidMount() {\n    const interval = setInterval(() => {\n      console.log(\"harvest resource called \");\n      this.harvestResource();\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centerItems\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          id: \"wallet\",\n          src: process.env.PUBLIC_URL + (this.state.currentResources > 0 ? \"/wallet/Wallet-0.png\" : \"/wallet/Wallet-1.png\"),\n          alt: \"broken img\",\n          style: {\n            width: `${10 * (this.state.currentResources / this.state.totalResources) + 10}rem`\n          },\n          onClick: () => {\n            this.harvestResource(this.props.harvestingPower);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: (this.state.currentResources / this.state.totalResources * 100).toFixed(0) + \"%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n}\nexport default Wallet;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Component","Wallet","constructor","props","harvestResource","clickStrength","console","log","dps","state","canHarvest","harvestAmount","getDps","updateMoney","setState","currentResources","currentResourcesRef","current","handleResourceDepleted","totalResources","resourcesMined","shouldReset","createRef","setTimeout","componentDidUpdate","prevProps","prevState","componentDidMount","interval","setInterval","clearInterval","render","process","env","PUBLIC_URL","width","harvestingPower","toFixed"],"sources":["/Users/faisal/new-clicker-game/src/Wallet.js"],"sourcesContent":["import React, {useState, useEffect, useRef, useCallback, Component} from \"react\";\n\n// function Wallet({ updateMoney, resourcesMined, harvestingPower, dps }) {\n//   const [totalResources,setTotalResources] = useState((1+resourcesMined)*10);\n//   const [currentResources,setCurrentResources] = useState(totalResources);\n//   let currentResourcesRef = useRef(currentResources)\n//   const [canHarvest,setCanHarvest] = useState(true)\n//   const [shouldReset,setShouldReset] = useState(false)\n\n//   function handleResourceDepleted() {\n//     setCurrentResources(0)\n//     setCanHarvest(false)\n//     setTotalResources(totalResources*1.1)\n//     setTimeout(() => {\n//      setShouldReset(true)\n//  },500)}\n\n\n//  const harvestResource = useCallback(\n//   (clickStrength) => {\n//     console.log(dps);\n//     if (!canHarvest) return;\n//     let harvestAmount = clickStrength ? clickStrength : getDps();\n//     //console.log(harvestAmount)\n//     updateMoney(harvestAmount);\n//     setCurrentResources((c) => {\n//       console.log('setCurrentResources called');\n//       return c - harvestAmount;\n//     });\n//     currentResourcesRef.current = currentResources - harvestAmount;\n//     if (currentResourcesRef.current <= 1) {\n//       handleResourceDepleted();\n//     }\n//   },\n//   [canHarvest]\n// );\n\n// function getDps() {\n//   return dps\n// }\n// //  useEffect(() => {\n// //    currentResourcesRef.current = currentResources\n// //  }, [currentResources])\n \n \n//   // function harvestResource(clickStrength) {\n//   //     console.log(dps)\n//   //     if(!canHarvest) return\n//   //     let harvestAmount = clickStrength ? clickStrength : getDps()\n//   //     //console.log(harvestAmount)\n//   //   updateMoney(harvestAmount)\n//   //   setCurrentResources((c) => {\n//   //     console.log(c);\n//   //     return c - harvestAmount;\n//   //   });\n//   //   console.log(currentResources);\n//   //   //console.log(currentResources)\n//   //   currentResourcesRef.current = currentResources - harvestAmount;\n//   //   if(currentResourcesRef.current<=1){\n//   //   handleResourceDepleted()\n//   //   }}\n\n  \n//   // Resets the resource if shouldReset is made True\n//   useEffect(() => {\n//     if(shouldReset) {\n//     setCurrentResources(totalResources)\n//     setCanHarvest(true)\n//     setShouldReset(false)\n//     }\n//   }, [shouldReset,totalResources, harvestResource])\n \n//   //Harvests the resource based on dps on an interval\n\n//   useEffect(() => {\n//       const interval = setInterval(() => {\n//         console.log(\"harvest resource called \")\n//       harvestResource()\n//     }, 1000);\n//     return () => {\n//       clearInterval(interval);\n//     }\n//   // eslint-disable-next-line \n//   },[])\n  \n//   return (\n//     <>\n//     <div className=\"centerItems\"> \n//     <img\n//         id=\"wallet\"\n//         src={process.env.PUBLIC_URL + currentResources>0 ? \"/wallet/Wallet-0.png\" : \"/wallet/Wallet-1.png\"}\n//         alt=\"broken img\"\n//         style={{width: `${10*(currentResources/totalResources)+10}rem`}}\n//          //style={{width: `${20*.3}px`} , height: `${currentResources/totalResources*100}%`}}\n//         onClick={() => {\n//           harvestResource(harvestingPower)\n//         }}\n//       ></img>\n//       <h1>\n//         {(currentResources/totalResources*100).toFixed(0) + \"%\"}\n//       </h1>\n//     </div>\n    \n//     </>\n//   );\n\n\n\n   \n  \n  \n//   function harvestDps() {\n//     harvestResource()\n//   }\n  \n// }\n\nclass Wallet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalResources: (1 + this.props.resourcesMined) * 10,\n      currentResources: (1 + this.props.resourcesMined) * 10,\n      canHarvest: true,\n      shouldReset: false,\n    };\n    this.currentResourcesRef = React.createRef();\n  }\n\n  handleResourceDepleted() {\n    this.setState({\n      currentResources: 0,\n      canHarvest: false,\n      totalResources: this.state.totalResources * 1.1,\n    });\n    setTimeout(() => {\n      this.setState({ shouldReset: true });\n    }, 500);\n  }\n\n  harvestResource = (clickStrength) => {\n    console.log(this.props.dps);\n    if (!this.state.canHarvest) return;\n    let harvestAmount = clickStrength ? clickStrength : this.getDps();\n    //console.log(harvestAmount)\n    this.props.updateMoney(harvestAmount);\n    this.setState((state) => {\n      console.log(\"setCurrentResources called\");\n      return { currentResources: state.currentResources - harvestAmount };\n    });\n    this.currentResourcesRef.current = this.state.currentResources - harvestAmount;\n    if (this.currentResourcesRef.current <= 1) {\n      this.handleResourceDepleted();\n    }\n  };\n\n  getDps() {\n    return this.props.dps;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.shouldReset) {\n      this.setState({\n        currentResources: this.state.totalResources,\n        canHarvest: true,\n        shouldReset: false,\n      });\n    }\n  }\n\n  componentDidMount() {\n    const interval = setInterval(() => {\n      console.log(\"harvest resource called \");\n      this.harvestResource();\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"centerItems\">\n          <img\n            id=\"wallet\"\n            src={\n              process.env.PUBLIC_URL +\n              (this.state.currentResources > 0\n                ? \"/wallet/Wallet-0.png\"\n                : \"/wallet/Wallet-1.png\")\n            }\n            alt=\"broken img\"\n            style={{\n              width: `${10 * (this.state.currentResources / this.state.totalResources) +\n                10}rem`,\n            }}\n            onClick={() => {\n              this.harvestResource(this.props.harvestingPower);\n            }}\n          ></img>\n          <h1>\n            {(\n              (this.state.currentResources / this.state.totalResources) *\n              100\n            ).toFixed(0) + \"%\"}\n          </h1>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Wallet;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}