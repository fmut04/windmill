{"ast":null,"code":"var _jsxFileName = \"/Users/faisal/new-clicker-game/src/Wallet.js\";\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\n\n// function Wallet({ updateMoney, resourcesMined, harvestingPower, dps }) {\n//   const [totalResources,setTotalResources] = useState((1+resourcesMined)*10);\n//   const [currentResources,setCurrentResources] = useState(totalResources);\n//   let currentResourcesRef = useRef(currentResources)\n//   const [canHarvest,setCanHarvest] = useState(true)\n//   const [shouldReset,setShouldReset] = useState(false)\n\n//   function handleResourceDepleted() {\n//     setCurrentResources(0)\n//     setCanHarvest(false)\n//     setTotalResources(totalResources*1.1)\n//     setTimeout(() => {\n//      setShouldReset(true)\n//  },500)}\n\n//  const harvestResource = useCallback(\n//   (clickStrength) => {\n//     console.log(dps);\n//     if (!canHarvest) return;\n//     let harvestAmount = clickStrength ? clickStrength : getDps();\n//     //console.log(harvestAmount)\n//     updateMoney(harvestAmount);\n//     setCurrentResources((c) => {\n//       console.log('setCurrentResources called');\n//       return c - harvestAmount;\n//     });\n//     currentResourcesRef.current = currentResources - harvestAmount;\n//     if (currentResourcesRef.current <= 1) {\n//       handleResourceDepleted();\n//     }\n//   },\n//   [canHarvest]\n// );\n\n// function getDps() {\n//   return dps\n// }\n// //  useEffect(() => {\n// //    currentResourcesRef.current = currentResources\n// //  }, [currentResources])\n\n//   // function harvestResource(clickStrength) {\n//   //     console.log(dps)\n//   //     if(!canHarvest) return\n//   //     let harvestAmount = clickStrength ? clickStrength : getDps()\n//   //     //console.log(harvestAmount)\n//   //   updateMoney(harvestAmount)\n//   //   setCurrentResources((c) => {\n//   //     console.log(c);\n//   //     return c - harvestAmount;\n//   //   });\n//   //   console.log(currentResources);\n//   //   //console.log(currentResources)\n//   //   currentResourcesRef.current = currentResources - harvestAmount;\n//   //   if(currentResourcesRef.current<=1){\n//   //   handleResourceDepleted()\n//   //   }}\n\n//   // Resets the resource if shouldReset is made True\n//   useEffect(() => {\n//     if(shouldReset) {\n//     setCurrentResources(totalResources)\n//     setCanHarvest(true)\n//     setShouldReset(false)\n//     }\n//   }, [shouldReset,totalResources, harvestResource])\n\n//   //Harvests the resource based on dps on an interval\n\n//   useEffect(() => {\n//       const interval = setInterval(() => {\n//         console.log(\"harvest resource called \")\n//       harvestResource()\n//     }, 1000);\n//     return () => {\n//       clearInterval(interval);\n//     }\n//   // eslint-disable-next-line \n//   },[])\n\n//   return (\n//     <>\n//     <div className=\"centerItems\"> \n//     <img\n//         id=\"wallet\"\n//         src={process.env.PUBLIC_URL + currentResources>0 ? \"/wallet/Wallet-0.png\" : \"/wallet/Wallet-1.png\"}\n//         alt=\"broken img\"\n//         style={{width: `${10*(currentResources/totalResources)+10}rem`}}\n//          //style={{width: `${20*.3}px`} , height: `${currentResources/totalResources*100}%`}}\n//         onClick={() => {\n//           harvestResource(harvestingPower)\n//         }}\n//       ></img>\n//       <h1>\n//         {(currentResources/totalResources*100).toFixed(0) + \"%\"}\n//       </h1>\n//     </div>\n\n//     </>\n//   );\n\n//   function harvestDps() {\n//     harvestResource()\n//   }\n\n// }\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Wallet extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      totalResources: (1 + resourcesMined) * 10,\n      currentResources: (1 + resourcesMined) * 10,\n      canHarvest: true,\n      shouldReset: false\n    };\n    this.harvestResource = clickStrength => {\n      console.log(dps);\n      if (!this.state.canHarvest) return;\n      let harvestAmount = clickStrength ? clickStrength : getDps();\n      //console.log(harvestAmount)\n      updateMoney(harvestAmount);\n      this.setState(state => ({\n        currentResources: state.currentResources - harvestAmount\n      }));\n      if (this.state.currentResources <= 1) {\n        this.handleResourceDepleted();\n      }\n    };\n  }\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.harvestResource();\n    }, 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centerItems\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          id: \"wallet\",\n          src: process.env.PUBLIC_URL + state.currentResources > 0 ? \"/wallet/Wallet-0.png\" : \"/wallet/Wallet-1.png\",\n          alt: \"broken img\",\n          style: {\n            width: `${10 * (state.currentResources / state.totalResources) + 10}rem`\n          }\n          //style={{width: `${20*.3}px`} , height: `${currentResources/totalResources*100}%`}}\n          ,\n          onClick: () => {\n            harvestResource(state.harvestingPower);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: (state.currentResources / state.totalResources * 100).toFixed(0) + \"%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 10\n      }, this)\n    }, void 0, false);\n  }\n}\nexport default Wallet;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Wallet","Component","state","totalResources","resourcesMined","currentResources","canHarvest","shouldReset","harvestResource","clickStrength","console","log","dps","harvestAmount","getDps","updateMoney","setState","handleResourceDepleted","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","process","env","PUBLIC_URL","width","harvestingPower","toFixed"],"sources":["/Users/faisal/new-clicker-game/src/Wallet.js"],"sourcesContent":["import React, {useState, useEffect, useRef, useCallback} from \"react\";\n\n// function Wallet({ updateMoney, resourcesMined, harvestingPower, dps }) {\n//   const [totalResources,setTotalResources] = useState((1+resourcesMined)*10);\n//   const [currentResources,setCurrentResources] = useState(totalResources);\n//   let currentResourcesRef = useRef(currentResources)\n//   const [canHarvest,setCanHarvest] = useState(true)\n//   const [shouldReset,setShouldReset] = useState(false)\n\n//   function handleResourceDepleted() {\n//     setCurrentResources(0)\n//     setCanHarvest(false)\n//     setTotalResources(totalResources*1.1)\n//     setTimeout(() => {\n//      setShouldReset(true)\n//  },500)}\n\n\n//  const harvestResource = useCallback(\n//   (clickStrength) => {\n//     console.log(dps);\n//     if (!canHarvest) return;\n//     let harvestAmount = clickStrength ? clickStrength : getDps();\n//     //console.log(harvestAmount)\n//     updateMoney(harvestAmount);\n//     setCurrentResources((c) => {\n//       console.log('setCurrentResources called');\n//       return c - harvestAmount;\n//     });\n//     currentResourcesRef.current = currentResources - harvestAmount;\n//     if (currentResourcesRef.current <= 1) {\n//       handleResourceDepleted();\n//     }\n//   },\n//   [canHarvest]\n// );\n\n// function getDps() {\n//   return dps\n// }\n// //  useEffect(() => {\n// //    currentResourcesRef.current = currentResources\n// //  }, [currentResources])\n \n \n//   // function harvestResource(clickStrength) {\n//   //     console.log(dps)\n//   //     if(!canHarvest) return\n//   //     let harvestAmount = clickStrength ? clickStrength : getDps()\n//   //     //console.log(harvestAmount)\n//   //   updateMoney(harvestAmount)\n//   //   setCurrentResources((c) => {\n//   //     console.log(c);\n//   //     return c - harvestAmount;\n//   //   });\n//   //   console.log(currentResources);\n//   //   //console.log(currentResources)\n//   //   currentResourcesRef.current = currentResources - harvestAmount;\n//   //   if(currentResourcesRef.current<=1){\n//   //   handleResourceDepleted()\n//   //   }}\n\n  \n//   // Resets the resource if shouldReset is made True\n//   useEffect(() => {\n//     if(shouldReset) {\n//     setCurrentResources(totalResources)\n//     setCanHarvest(true)\n//     setShouldReset(false)\n//     }\n//   }, [shouldReset,totalResources, harvestResource])\n \n//   //Harvests the resource based on dps on an interval\n\n//   useEffect(() => {\n//       const interval = setInterval(() => {\n//         console.log(\"harvest resource called \")\n//       harvestResource()\n//     }, 1000);\n//     return () => {\n//       clearInterval(interval);\n//     }\n//   // eslint-disable-next-line \n//   },[])\n  \n//   return (\n//     <>\n//     <div className=\"centerItems\"> \n//     <img\n//         id=\"wallet\"\n//         src={process.env.PUBLIC_URL + currentResources>0 ? \"/wallet/Wallet-0.png\" : \"/wallet/Wallet-1.png\"}\n//         alt=\"broken img\"\n//         style={{width: `${10*(currentResources/totalResources)+10}rem`}}\n//          //style={{width: `${20*.3}px`} , height: `${currentResources/totalResources*100}%`}}\n//         onClick={() => {\n//           harvestResource(harvestingPower)\n//         }}\n//       ></img>\n//       <h1>\n//         {(currentResources/totalResources*100).toFixed(0) + \"%\"}\n//       </h1>\n//     </div>\n    \n//     </>\n//   );\n\n\n\n   \n  \n  \n//   function harvestDps() {\n//     harvestResource()\n//   }\n  \n// }\n\nclass Wallet extends Component {\n\n   state = {\n    totalResources: (1 + resourcesMined) * 10,\n    currentResources: (1 + resourcesMined) * 10,\n    canHarvest: true,\n    shouldReset: false,\n  };\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.harvestResource();\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  harvestResource = (clickStrength) => {\n    console.log(dps);\n    if (!this.state.canHarvest) return;\n    let harvestAmount = clickStrength ? clickStrength : getDps();\n    //console.log(harvestAmount)\n    updateMoney(harvestAmount);\n    this.setState((state) => ({\n      currentResources: state.currentResources - harvestAmount,\n    }));\n    if (this.state.currentResources <= 1) {\n      this.handleResourceDepleted();\n    }\n  };\n\n  render() {\n    return(\n    <>\n         <div className=\"centerItems\"> \n        <img\n            id=\"wallet\"\n            src={process.env.PUBLIC_URL + state.currentResources>0 ? \"/wallet/Wallet-0.png\" : \"/wallet/Wallet-1.png\"}\n            alt=\"broken img\"\n            style={{width: `${10*(state.currentResources/state.totalResources)+10}rem`}}\n             //style={{width: `${20*.3}px`} , height: `${currentResources/totalResources*100}%`}}\n            onClick={() => {\n              harvestResource(state.harvestingPower)\n            }}\n          ></img>\n          <h1>\n            {(state.currentResources/state.totalResources*100).toFixed(0) + \"%\"}\n          </h1>\n         </div>\n      </>\n  )}\n          }\n\n\n\n\n\nexport default Wallet;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}