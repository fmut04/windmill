{"ast":null,"code":"var _jsxFileName = \"/Users/faisal/new-clicker-game/src/App.js\";\nimport React from \"react\";\nimport Wallet from \"./Wallet\";\nimport Shop from \"./shop/Shop\";\nimport Authentication from \"./Authentication\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateShopData = (title, newData) => {\n      // let data = {dps: 1000000, numActive: 1}\n      let new_dict = this.state.shopData;\n      for (var key in new_dict) {\n        if (key === title) new_dict[key] = newData;\n      }\n      console.log(this.state.shopData);\n\n      //  let updatedDataList = this.state.shopData.map(item => \n      //    {\n      //      if (item.title === title){\n      //        // return {...item, \n      //        //   [prop1]: newVal1,\n      //        //   [prop2]: newVal2\n      //        // }; \n      //        return {\n      //          ...item, \n      //          ...newData\n      //        }; \n      //      }\n      //      return item;\n      //    });\n      //    console.log(updatedDataList)\n      this.setState({\n        shopData: new_dict\n      }); // set state to new object with updated list\n    };\n    this.state = {\n      totalMoney: 0,\n      dps: 0,\n      // miningPower is the players harvest amount per hit\n      miningPower: 1,\n      shopData: {\n        \"Dog Miner\": {\n          cost: 5,\n          dps: 1,\n          numActive: 0\n        },\n        \"Super Dog\": {\n          cost: 50,\n          dps: 5,\n          numActive: 0\n        },\n        \"Mining Drill\": {\n          cost: 200,\n          dps: 20,\n          numActive: 0\n        },\n        \"Example\": {\n          cost: 1000,\n          dps: 100,\n          numActive: 0\n        },\n        \"miningPower\": {\n          cost: 200,\n          numActive: 0\n        },\n        \"dps\": {\n          cost: 100,\n          numActive: 0\n        }\n      }\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(Authentication, {\n        getGameInfo: this.getGameInfo(),\n        setGameInfo: info => this.setGameInfo(info)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-div\",\n        id: \"center-div\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Money: \", this.state.totalMoney]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          id: \"dps\",\n          children: [\"DPS: \", this.state.dps]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Wallet, {\n          updateMoney: moneyGained => this.updateMoney(moneyGained),\n          miningPower: this.state.miningPower,\n          dps: this.state.dps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Shop, {\n        incrementDps: increment => this.incrementDps(increment),\n        getTotalMoney: () => this.getTotalMoney(),\n        updateTotalMoney: cost => this.updateMoney(cost),\n        getDps: () => this.state.dps,\n        multMiningPower: multFactor => this.multMiningPower(multFactor),\n        updateShopData: (title, newData) => this.updateShopData(title, newData),\n        shopData: this.state.shopData\n        // helpersData = {helpersData}\n        // upgradesData = {upgradesData}\n        // updateHelpersData = {(title,newVal,idx) => this.updateHelpersData(title,newVal,idx)}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  }\n\n  // updateHelpersData(title,newVal,idx) {\n\n  //   this.setState(prevState => ({\n  //     helpersData: {\n  //       ...prevState.helpersData,\n  //       [idx]: \n  //     }\n  // }))\n  // }\n\n  // updateShopData = (title, newData) => {\n  //  // let data = {dps: 1000000, numActive: 1}\n  //   let updatedDataList = this.state.shopData.map(item => \n  //     {\n  //       if (item.title === title){\n  //         // return {...item, \n  //         //   [prop1]: newVal1,\n  //         //   [prop2]: newVal2\n  //         // }; \n  //         return {\n  //           ...item, \n  //           ...newData\n  //         }; \n  //       }\n  //       return item;\n  //     });\n  //     console.log(updatedDataList)\n  //   this.setState({shopData: updatedDataList}); // set state to new object with updated list\n  // }\n\n  incrementDps(increment) {\n    this.setState({\n      dps: this.state.dps + increment\n    });\n  }\n  updateMoney(moneyToUpdate) {\n    this.setState({\n      totalMoney: this.state.totalMoney + moneyToUpdate\n    });\n  }\n  multMiningPower(multFactor) {\n    this.setState({\n      miningPower: this.state.miningPower * multFactor\n    });\n  }\n  getTotalMoney() {\n    return this.state.totalMoney;\n  }\n  handleWalletClick(clickStrength, resourcesLeft) {\n    var moneyGained = clickStrength;\n    // Set a state \"fullyMined\" to true that gets passed to the wallet so when fullyMined is true the wallet resets its variables\n    // and then in this block, call a function like \"resetResource\" to reset it and get prepared to implement chest drops when the \n    // resource is fully mined.\n    this.setState({\n      totalMoney: this.state.totalMoney + moneyGained\n    });\n  }\n  getGameInfo() {\n    return {\n      totalMoney: this.state.totalMoney,\n      dps: this.state.dps,\n      miningPower: this.state.miningPower\n    };\n  }\n  setGameInfo(info) {\n    console.log(info);\n    this.setState({\n      totalMoney: info.totalMoney,\n      dps: info.dps,\n      miningPower: info.miningPower\n    });\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Wallet","Shop","Authentication","App","Component","constructor","props","updateShopData","title","newData","new_dict","state","shopData","key","console","log","setState","totalMoney","dps","miningPower","cost","numActive","render","getGameInfo","info","setGameInfo","moneyGained","updateMoney","increment","incrementDps","getTotalMoney","multFactor","multMiningPower","moneyToUpdate","handleWalletClick","clickStrength","resourcesLeft"],"sources":["/Users/faisal/new-clicker-game/src/App.js"],"sourcesContent":["import React from \"react\";\nimport Wallet from \"./Wallet\";\nimport Shop from \"./shop/Shop\"\nimport Authentication from \"./Authentication\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalMoney: 0,\n      dps: 0,\n      // miningPower is the players harvest amount per hit\n      miningPower: 1,\n      shopData: {\"Dog Miner\": {cost: 5, dps: 1, numActive: 0}, \"Super Dog\": {cost: 50 , dps: 5, numActive: 0},\n      \"Mining Drill\": { cost: 200 ,dps: 20, numActive: 0 }, \"Example\": {cost: 1000, dps: 100, numActive: 0},\n      \"miningPower\": {cost: 200, numActive: 0}, \"dps\":  {cost: 100, numActive: 0}},\n    };\n  }\n  render() {\n    return (\n      <div id=\"body\">\n         <Authentication\n          getGameInfo={this.getGameInfo()}\n          setGameInfo={(info) => this.setGameInfo(info)}\n        />\n        <div className=\"grid-div\" id=\"center-div\">\n          <h1>Money: {this.state.totalMoney}</h1>\n          <h1 id=\"dps\">DPS: {this.state.dps}</h1>\n          <Wallet\n            updateMoney={(moneyGained) => this.updateMoney(moneyGained)}\n            miningPower={this.state.miningPower}\n            dps={this.state.dps}\n          />\n        </div>\n        <Shop\n          incrementDps = {(increment) => this.incrementDps(increment)}\n          getTotalMoney = {() => this.getTotalMoney()}\n          updateTotalMoney = {(cost) => this.updateMoney(cost)}\n          getDps = {() => this.state.dps}\n          multMiningPower= {(multFactor) => this.multMiningPower(multFactor)}\n          updateShopData = {(title,newData) => this.updateShopData(title,newData)}\n          shopData = {this.state.shopData}\n          // helpersData = {helpersData}\n          // upgradesData = {upgradesData}\n          // updateHelpersData = {(title,newVal,idx) => this.updateHelpersData(title,newVal,idx)}\n        />\n       \n      </div>\n    );\n  }\n\n\n  // updateHelpersData(title,newVal,idx) {\n\n  \n  //   this.setState(prevState => ({\n  //     helpersData: {\n  //       ...prevState.helpersData,\n  //       [idx]: \n  //     }\n  // }))\n  // }\n\n  // updateShopData = (title, newData) => {\n  //  // let data = {dps: 1000000, numActive: 1}\n  //   let updatedDataList = this.state.shopData.map(item => \n  //     {\n  //       if (item.title === title){\n  //         // return {...item, \n  //         //   [prop1]: newVal1,\n  //         //   [prop2]: newVal2\n  //         // }; \n  //         return {\n  //           ...item, \n  //           ...newData\n  //         }; \n  //       }\n  //       return item;\n  //     });\n  //     console.log(updatedDataList)\n  //   this.setState({shopData: updatedDataList}); // set state to new object with updated list\n  // }\n\n\n  updateShopData = (title, newData) => {\n    // let data = {dps: 1000000, numActive: 1}\n     let new_dict = this.state.shopData\n      for(var key in new_dict) {\n        if(key===title) new_dict[key] = newData\n      }\n      console.log(this.state.shopData)\n\n\n    //  let updatedDataList = this.state.shopData.map(item => \n    //    {\n    //      if (item.title === title){\n    //        // return {...item, \n    //        //   [prop1]: newVal1,\n    //        //   [prop2]: newVal2\n    //        // }; \n    //        return {\n    //          ...item, \n    //          ...newData\n    //        }; \n    //      }\n    //      return item;\n    //    });\n    //    console.log(updatedDataList)\n      this.setState({shopData: new_dict}); // set state to new object with updated list\n   }\n\n\n  incrementDps(increment) {\n    this.setState({\n      dps: this.state.dps + increment\n    });\n  }\n\n  updateMoney(moneyToUpdate) {\n    this.setState({\n      totalMoney: this.state.totalMoney + moneyToUpdate\n    })\n  }\n\n  multMiningPower(multFactor) {\n    this.setState({\n      miningPower: this.state.miningPower * multFactor\n    })\n  }\n  getTotalMoney() {\n    return this.state.totalMoney\n  }\n  handleWalletClick(clickStrength,resourcesLeft) {\n    var moneyGained = clickStrength\n      // Set a state \"fullyMined\" to true that gets passed to the wallet so when fullyMined is true the wallet resets its variables\n      // and then in this block, call a function like \"resetResource\" to reset it and get prepared to implement chest drops when the \n      // resource is fully mined.\n    this.setState({\n      totalMoney: this.state.totalMoney + moneyGained \n    });\n  }\n\n\n\n\n  getGameInfo() {\n    return {\n      totalMoney: this.state.totalMoney,\n      dps: this.state.dps,\n      miningPower: this.state.miningPower\n    };\n  }\n\n  setGameInfo(info) {\n    console.log(info)\n    this.setState({\n      totalMoney: info.totalMoney,\n      dps: info.dps,\n      miningPower: info.miningPower,\n    });\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}