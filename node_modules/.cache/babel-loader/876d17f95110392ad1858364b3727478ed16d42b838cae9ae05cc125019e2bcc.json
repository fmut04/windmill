{"ast":null,"code":"var _jsxFileName = \"/Users/faisal/new-clicker-game/src/Wallet.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Wallet(_ref) {\n  _s();\n  let {\n    updateMoney,\n    resourcesMined,\n    harvestingPower,\n    dps\n  } = _ref;\n  const [totalResources, setTotalResources] = useState((1 + resourcesMined) * 10);\n  const [currentResources, setCurrentResources] = useState(totalResources);\n  const [canHarvest, setCanHarvest] = useState(true);\n  const [shouldReset, setShouldReset] = useState(false);\n  let timer;\n  const handleResourceDepleted = useCallback(() => {\n    setCurrentResources(0);\n    setCanHarvest(false);\n    setTotalResources(totalResources * 1.1);\n    setTimeout(() => {\n      setShouldReset(true);\n    }, 500);\n  }, [totalResources]);\n  const harvestResource = useCallback(harvestAmount => {\n    if (!canHarvest) return;\n    console.log(currentResources);\n    updateMoney(harvestAmount);\n    setCurrentResources(currentResources - harvestAmount);\n    //console.log(currentResources-harvestAmount)\n    if (currentResources <= 1) {\n      handleResourceDepleted();\n    }\n  }, [updateMoney, canHarvest, handleResourceDepleted]);\n  useEffect(() => {\n    // console.log(\"using effect\")\n    if (shouldReset) {\n      setCurrentResources(totalResources);\n      setCanHarvest(true);\n      setShouldReset(false);\n    }\n  }, [shouldReset, totalResources]);\n  useEffect(() => {\n    console.log(\"new use effect\");\n    if (!timer) {\n      timer = setInterval(() => {\n        console.log(\"harvesting\");\n        harvestResource(dps);\n      }, 1000);\n      return () => clearInterval(timer);\n    }\n  }, [dps, harvestResource]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centerItems\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"wallet\",\n        src: process.env.PUBLIC_URL + currentResources > 0 ? \"/wallet/Wallet-0.png\" : \"/wallet/Wallet-1.png\",\n        alt: \"broken img\",\n        style: {\n          width: `${10 * (currentResources / totalResources) + 10}rem`\n        }\n        //style={{width: `${20*.3}px`} , height: `${currentResources/totalResources*100}%`}}\n        ,\n        onClick: () => {\n          harvestResource(harvestingPower);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: (currentResources / totalResources * 100).toFixed(0) + \"%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n  function harvestDps() {\n    harvestResource(dps);\n  }\n}\n_s(Wallet, \"mzCaHR5g4HjmKpU2SL6qeBSCOzU=\");\n_c = Wallet;\nexport default Wallet;\nvar _c;\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Wallet","updateMoney","resourcesMined","harvestingPower","dps","totalResources","setTotalResources","currentResources","setCurrentResources","canHarvest","setCanHarvest","shouldReset","setShouldReset","timer","handleResourceDepleted","setTimeout","harvestResource","harvestAmount","console","log","setInterval","clearInterval","process","env","PUBLIC_URL","width","toFixed","harvestDps"],"sources":["/Users/faisal/new-clicker-game/src/Wallet.js"],"sourcesContent":["import React, {useState, useEffect, useCallback} from \"react\";\n\nfunction Wallet({ updateMoney, resourcesMined, harvestingPower, dps }) {\n  const [totalResources,setTotalResources] = useState((1+resourcesMined)*10);\n  const [currentResources,setCurrentResources] = useState(totalResources);\n  const [canHarvest,setCanHarvest] = useState(true)\n  const [shouldReset,setShouldReset] = useState(false)\n  let timer;\n\n\n\n  const handleResourceDepleted= useCallback(() => {\n    setCurrentResources(0)\n    setCanHarvest(false)\n    setTotalResources(totalResources*1.1)\n    setTimeout(() => {\n     setShouldReset(true)\n },500)},[totalResources])\n\n  const harvestResource = useCallback(\n    (harvestAmount) => {\n      if(!canHarvest) return\n    console.log(currentResources)\n    updateMoney(harvestAmount)\n    setCurrentResources(currentResources-harvestAmount)\n    //console.log(currentResources-harvestAmount)\n    if(currentResources<=1){\n    handleResourceDepleted()\n    }},\n    [updateMoney,canHarvest,handleResourceDepleted],\n  )\n\n  \n\n  useEffect(() => {\n   // console.log(\"using effect\")\n    if(shouldReset) {\n    setCurrentResources(totalResources)\n    setCanHarvest(true)\n    setShouldReset(false)\n    }\n  }, [shouldReset,totalResources])\n  \n  useEffect(() => {\n    console.log(\"new use effect\")\n    if(!timer) {\n     timer = setInterval(() => {\n      console.log(\"harvesting\")\n      harvestResource(dps)\n    }, 1000);\n    return () => clearInterval(timer);\n  }\n  },[dps,harvestResource])\n  \n  return (\n    <>\n    <div className=\"centerItems\"> \n    <img\n        id=\"wallet\"\n        src={process.env.PUBLIC_URL + currentResources>0 ? \"/wallet/Wallet-0.png\" : \"/wallet/Wallet-1.png\"}\n        alt=\"broken img\"\n        style={{width: `${10*(currentResources/totalResources)+10}rem`}}\n         //style={{width: `${20*.3}px`} , height: `${currentResources/totalResources*100}%`}}\n        onClick={() => {\n          harvestResource(harvestingPower)\n        }}\n      ></img>\n      <h1>\n        {(currentResources/totalResources*100).toFixed(0) + \"%\"}\n      </h1>\n    </div>\n    \n    </>\n  );\n\n\n\n   \n  \n  \n  function harvestDps() {\n    harvestResource(dps)\n  }\n  \n}\n\n\n\n\n\n\n\nexport default Wallet;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}